package terms;

apply kirra;
import mdd_types;

datatype NoRelatedTermFound
end;

datatype NoDefinitionFound
end;

class Term
    id attribute name : String;
    attribute definition : Memo;
    
    static operation researchTerm(toResearch : String) : Term;
    begin
        var term;
        term := new Term;
        term.name := toResearch;
        term.defineThisTerm();
        return term;
    end;

    operation researchRelatedTerms() raises NoRelatedTermFound;
    begin
        var retrieved : RetrievedTerm;
        begin
            retrieved := self.definer.define(self.name);
            if (retrieved.related.isEmpty()) then
                raise new NoRelatedTermFound;
            retrieved.related.forEach((r : RetrievedTerm) {
                self.addRelatedTerm(r);
            });
        end;
    end;
    
    operation defineThisTerm();
    begin
        begin
            Term#researchDefinition(self);
        end;
    end;
    
    static operation researchDefinition(term : Term);
    begin
        var retrieved : RetrievedTerm;
        begin
            retrieved := term.definer.define(term.name);
            if (retrieved.related.isEmpty()) then
                raise new NoDefinitionFound;
            term.definition := Memo#fromString(retrieved.related.one().definition);
        end;
    end;

    static query findByName(termName : String) : Term[*];
    begin
        return Term extent.select((t : Term) : Boolean { t.name = termName });
    end;

    private operation addRelatedTerm(r : RetrievedTerm);
    begin
        var newTerm, existingTerm : Term;
        begin
            begin
                existingTerm := Term#findByName(r.term).one();
                if (existingTerm == null) then
                begin
		            newTerm := new Term;
		            newTerm.name := r.term;
		            newTerm.definition := r.definition;
		        end;
	        end;
	        begin
	            var toLink : Term;
	            if (existingTerm == null) then
	                toLink := newTerm
	            else
	            begin
	                if (!(existingTerm == self)) then
	                    toLink := existingTerm;
	            end;
	            if (!(toLink == null)) then
                    link TermRelationship(parentTerm := self, relatedTerms := toLink);
            end;
        end;
    end;
    
    required port definer : Definer;
    
    static query numberOfTerms() : Integer;
    begin
        return Term extent.size();
    end;
end;

association TermRelationship
    role parentTerm : Term[0,1];
    navigable role relatedTerms : Term[*];
end;


interface Definer
    operation define(term : String) : RetrievedTerm;
end;

datatype RetrievedTerm
    attribute term : String;
    attribute definition : Memo[0,1];
    attribute related : RetrievedTerm[*];
end;


external class DefinitionService implements Definer
end;

component TermsApp

    composition terms : Term[*];

    composition definitionService : DefinitionService;

    provided port definer : Definer connector terms.definer, definitionService;
end;

end.