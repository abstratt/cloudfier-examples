[Library]
package todo_tests;

import todo;
import todo::User;

[Test]
class TaskScenarios

    operation allTasks();
    begin
        var user, baseline;
        begin
            baseline := Task extent.size();
            user := Examples#userWithName("auser");
	        Examples#taskFor(user, "");
	        Examples#taskFor(user, "");        
            Examples#taskFor(user, "");                
        end;
        begin        
            Assert#areEqual(baseline + 3, Task extent.size());
        end;        
    end;

    operation openTasks();
    begin
        var task, user, baseline;
        begin
            baseline := Task#open().size();
            user := Examples#userWithName("auser");
	        Examples#taskFor(user, "");
	        Examples#taskFor(user, "");        
            task := Examples#taskFor(user, "");                
        end;
        begin        
            Assert#areEqual(3 + baseline, Task#open().size());
            task.complete();
        end;
        begin        
            Assert#areEqual(2 + baseline, Task#open().size());
        end;        
    end;

    operation openedToday();
    begin
        var task, today, yesterday, user;
        begin
            user := Examples#userWithName("auser");
            today := Date#today();
            yesterday := today.transpose(Duration#days(-1));            
	        Examples#taskFor(user, "");
	        Examples#taskFor(user, "");        
            task := Examples#taskFor(user, "");
        end;
        begin        
            Assert#areEqual(3, Task#openedOn(today).size());
            Assert#areEqual(0, Task#openedOn(yesterday).size());            
            task.openedOn := yesterday;
        end;
        begin        
            Assert#areEqual(2, Task#openedOn(today).size());
            Assert#areEqual(1, Task#openedOn(yesterday).size());            
        end;        
    end;
end;

class Examples

    private static operation userWithName(name : String) : User;
    begin
        var user;
        user := new User;
        user.name := name;
        return user;
    end;

    private static operation taskFor(user : User, task : String) : Task;
    begin
        var newTask;
        newTask := new Task;
        newTask.description := task;
        newTask.details := Memo#fromString(task + " details");        
        newTask.creator := user;
        newTask.assignee := user;        
        return newTask;
    end;
    
    private static operation task(task : String) : Task;
    begin
        return Examples#taskFor(Examples#userWithName("a user"), task);
    end;
    
end;

end.
