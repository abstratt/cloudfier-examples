package todo;

apply kirra;

import mdd_types;

role class User

    attribute name : String;

    reference tasks : Task[*] opposite assignee;

    derived attribute openTasks : Task[*] := {
        self.tasks.select((t : Task) : Boolean {
            t.status == Task::Status#Open
        })
    };

    private static derived attribute me : User := {
        (System#user() as User)
    };
end;

class Task

    readonly attribute creator : User := { (System#user() as User) };

    attribute assignee : User[0, 1] := { (System#user() as User) };

    attribute description : String;

    attribute details : Memo;

    attribute status : Status;

    readonly attribute openedOn : Date := { Date#today() };

    readonly attribute completedOn : DateTime[0, 1];
    
    composition comments : Comment[*] opposite task;

    operation complete();

    operation reassign(newUser : User)
    precondition (newUser) { not (newUser == self.assignee) };
    begin
        self.assignee := newUser;
    end;

    operation cancel();

    static query open() : Task[*];
    begin
        return Task extent.select((t : Task) : Boolean {
            t.status == Status#Open
        });
    end;

    static query createdByMe() : Task[*];
    begin
        return User#me.tasks;
    end;

    static query mine() : Task[*];
    begin
        return User#me.tasks;
    end;

    static query mineOpen() : Task[*];
    begin
        return Task#openForUser(User#me);
    end;
    
    static query openForUser(user : User) : Task[*];
    begin
        return Task extent.select((t : Task) : Boolean {
            t.assignee == user and t.status == Status#Open
        });
    end;


    static query openedToday() : Task[*];
    begin
        return Task#openedOn(Date#today());
    end;

    static query openedOn(date : Date) : Task[*];
    begin
        return Task extent.select((t : Task) : Boolean { t.openedOn = date });
    end;

    static query completedToday() : Task[*];
    begin
        return Task extent.select((t : Task) : Boolean {
            t.status == Status#Completed and (t.completedOn = Date#today())
        });
    end;

    statemachine Status
        initial state Open
            transition on call(complete) to Completed;
            transition on call(cancel) to Cancelled;
        end;
        state Completed
            entry {
                self.completedOn := DateTime#now();
            };
        end;
        terminate state Cancelled end;
    end;

end;

class Comment

    attribute text : Memo;
    attribute task : Task;

    readonly attribute author : User := { (System#user() as User) };
end;

end.