/*
 * See Example Applications in the documentation for more information:
 *
 * http://cloudfier.com/doc/
 */
package shipit;

apply kirra;

import mdd_types;

role class User

    readonly id attribute email : String;

    id attribute fullName : String;

    readonly attribute kind : UserKind := Reporter;

    private derived static attribute current : User[0, 1] := { (System#user() as User) };

    private derived attribute committer : Boolean := {
        self.kind == UserKind#Committer
    };

    private attribute issuesAssignedToUser : Issue[*];

    readonly attribute issuesReportedByUser : Issue[*];

    derived attribute issuesCurrentlyInProgress : Issue[*] := {
        self.issuesAssignedToUser.select((issue : Issue) : Boolean {
            issue.status == Issue::Status#InProgress
        })
    };

    derived attribute issuesCurrentlyAssigned : Issue[*] := {
        self.issuesAssignedToUser.select((issue : Issue) : Boolean {
            issue.status == Issue::Status#Assigned
        })
    };

    private derived static attribute provisioned : Boolean := {
        ! (System#user() == null)
    };

    operation promoteToCommitter()
        precondition { not (User#current() == null) and User#current().committer };
    begin
        self.kind := UserKind#Committer;
    end;

    static query current() : User;
    begin
        return (System#user() as User);
    end;

    query isVoter(toCheck : Issue) : Boolean;
    begin
        return self<-VotedIssues->voted.includes(toCheck);
    end;

    operation voteOn(issue : Issue)
        (* A user can only vote once on any given issue. *) 
        precondition (issue) { ! self.isVoter(issue) };
    begin
        link VotedIssues(voted := issue, voter := self);
    end;

    operation withdrawVoteFrom(issue : Issue)
        precondition votedOnAnyIssues {
            ! self<-VotedIssues->voted.isEmpty()
        }
        precondition IsAVoterOfIssue(issue) { self.isVoter(issue) };
    begin
        unlink VotedIssues(voted := issue, voter := self);
    end;
end;

enumeration UserKind

    Reporter;

    Committer;
end;

enumeration Severity

    Minor;

    Normal;

    Major;

    Blocker;

    Enhancement;
end;

interface UserNotifier
end;

abstract signal UserNotification

    attribute issueKey : String;

    attribute userEmail : String;
end;

signal IssueReported specializes UserNotification

    attribute summary : String;

    attribute description : Memo;
end;

signal IssueResolved specializes UserNotification

    attribute resolution : Resolution;
end;

signal CommentAdded specializes UserNotification

    attribute comment : Memo;

    attribute author : String;
end;

enumeration Resolution

    Fixed;

    WorksForMe;

    WontFix;
end;

class Comment

    readonly attribute text : Memo;

    readonly attribute user : User := { User#current };

    readonly attribute commentedOn : Date := { Date#now() };

    readonly attribute inReplyTo : Comment[0, 1];

    readonly attribute issue : Issue;

    operation reply(text : Memo);
    begin
        self.issue.addComment(text, self);
    end;
end;

class Label

    id attribute name : String;
end;

association IssueLabels

    role Issue.labels;

    role labeled : Issue[*];

end;

association AssignedIssue

    role Issue.assignee;

    role User.issuesAssignedToUser;

end;

association ReportedIssue

    role Issue.reporter;

    role User.issuesReportedByUser;

end;

association WatchedIssues

    role Issue.watchers;

    navigable role issuesWatched : Issue[*];

end;

(* Issues are reported against a specific project. *)
class Project

    id attribute description : String;

    id attribute token : String;
end;

association ProjectIssues

    navigable role issues : Issue[*];

    role Issue.project;

end;

association VotedIssues

    navigable role voter : User[*];

    navigable role voted : Issue[*];

end;

(* 
    An issue describes a problem report, a feature request or just a work item for a project.
    Issues are reported by and assigned to users, and go through a lifecycle from the time 
    they are opened until they are resolved and eventually closed.
*)
class Issue

    derived id attribute mnemonic : String := {
        self.issueKey + " - " + self.summary
    };

    attribute summary : String;

    protected derived id attribute issueId : Integer;

    derived id attribute issueKey : String := {
        self.project.token + "-" + self.issueId
    };

    attribute labels : Label[*];

    attribute project : Project;

    port userNotifier : UserNotifier;

    readonly attribute reportedOn : Date := { Date#today() };

    readonly attribute reporter : User;

    readonly attribute assignee : User[0, 1];

    attribute severity : Severity := Major;

    attribute status : Status;

    readonly attribute resolution : Resolution[0, 1];

    readonly attribute resolvedOn : Date[0, 1];

    readonly attribute comments : Comment[*];

    attribute watchers : User[*];

    derived attribute votes : Integer := {
        self<-VotedIssues->voter.size()
    };

    derived attribute commentCount : Integer := { self.comments.size() };

    derived attribute waitingFor : String := {
        ("" + self.reportedOn.difference(self.referenceDate()).toDays()) + " day(s)"
    };

    private derived attribute mine : Boolean := {
        User#current == self.assignee
    };

    private derived attribute free : Boolean := { self.assignee == null };

    private query referenceDate() : Date;
    begin
        if (self.resolvedOn == null) then
            return Date#today()
        else
            return self.resolvedOn;
    end;

    attribute description : Memo;

    (* Report a new issue. *)
    static operation reportIssue(project : Project, summary : String, description : Memo, 
            severity : Severity := Normal)
        precondition Must_be_logged_in { User#provisioned };
    begin
        var newIssue;
        newIssue := Issue#createIssue(User#current, project, summary, description, severity);
        send IssueReported(
            issueKey := newIssue.issueKey, 
            summary := summary, 
            description := description, 
            userEmail := newIssue.reporter.email) to newIssue.userNotifier;
    end;

    static operation createIssue(reporter : User, project : Project, summary : String, 
            description : Memo, severity : Severity := Normal) : Issue;
    begin
        var newIssue;
        newIssue := new Issue;
        newIssue.summary := summary;
        newIssue.description := description;
        newIssue.severity := severity;
        newIssue.project := project;
        newIssue.reporter := reporter;
        return newIssue;
    end;

    static query bySeverity(toMatch : Severity) : Issue[*];
    begin
        return Issue extent.select((i : Issue) : Boolean {
            i.severity == toMatch
        });
    end;

    static query byProject(toMatch : Project) : Issue[*];
    begin
        return Issue extent.select((i : Issue) : Boolean {
            i.project == toMatch
        });
    end;

    (* Release the issue so another committer can work on it. *)
    operation release()
        precondition { self.mine };
    begin
        self.assignee := null;
    end;

    (* Assign an issue to a user. *)
    operation assign(newAssignee : User)
        precondition { self.mine or self.free };
    begin
        self.assignee := newAssignee;
    end;

    (* Suspend work on this issue. *)
    operation suspend()
        precondition { self.mine };

    (* Start/resume work on this issue. *)
    operation start()
        precondition { self.mine };

    (* Resolve the issue. *)
    operation resolve(resolution : Resolution := Fixed)
        precondition { self.mine or self.free };
    begin
        self.resolvedOn := Date#today();
        self.resolution := resolution;
    end;

    (* Reopen the issue. *)
    operation reopen(reason : Memo[0, 1] := { ("" as Memo) });
    begin
        self.resolvedOn := null;
        self.resolution := null;
        if (reason != "") then
            self.comment(reason);
    end;

    (* Add a comment to the issue *)
    operation comment(text : Memo);
    begin
        self.addComment(text, null);
    end;

    protected operation addComment(text : Memo, inReplyTo : Comment);
    begin
        var comment;
        comment := new Comment;
        comment.commentedOn := Date#today();
        comment.text := text;
        comment.user := User#current;
        comment.inReplyTo := inReplyTo;
        link IssueComments(issue := self, comments := comment);
        send CommentAdded(
            issueKey := self.issueKey, 
            author := comment.user.email, 
            userEmail := self.reporter.email, 
            comment := text) to self.userNotifier;
    end;

    operation addWatcher(userToAdd : User);
    begin
        link WatchedIssues(issuesWatched := self, watchers := userToAdd);
    end;

    operation vote()
        precondition MustLogIn { not (User#current == null) };
    begin
        User#current.voteOn(self);
    end;

    operation withdrawVote()
        precondition MustLogIn { not (User#current == null) };
    begin
        User#current.withdrawVoteFrom(self);
    end;

    (* Take over an issue currently available. *)
    operation assignToMe()
        precondition { User#current.committer }
        precondition { not self.mine };
    begin
        self.assignee := User#current;
    end;

    (* Take over an issue currently assigned to another user (not in progress). *)
    operation steal()
        precondition { User#current.committer }
        precondition { not (self.mine) };
    begin
        self.assignee := User#current;
    end;

    (* Close the issue marking it as verified. *)
    operation verify();
    begin
    end;

    statemachine Status

        initial state Open
            transition on call(resolve) to Resolved;
            transition on call(assignToMe) to Assigned;
            transition on call(assign) to Assigned;
        end;

        state InProgress
            transition on call(suspend) to Assigned;
        end;

        state Assigned
            transition on call(release) to Open;
            transition on call(resolve) to Resolved;
            transition on call(steal) to Assigned;
            transition on call(start) to InProgress;
        end;

        state Resolved
            transition on call(verify) to Verified;
            transition on call(reopen) to Open;
        end;

        state Verified
            transition on call(reopen) to Open;
        end;

    end;

end;

composition IssueComments

    role Issue.comments;

    role Comment.issue;

end;

end.