[Library]
package cities_tests;

apply mdd_extensions;

import cities::State;
import cities;
import mdd_types;

[Test]
class Tests

    operation findCapitals();
    begin
        var capitals, oregon, cities;
        TestData#build();
        capitals := City#stateCapitals();
        cities := City extent;
        /*Assert#areEqual(cities.collect((c : City) : String {c.name}), capitals.collect((c : City) : String {c.name}));*/
        Assert#areEqual(3, capitals.size());
        oregon := State#byAbbreviation("OR");
        Assert#isNotNull(oregon.capital);
        Assert#areEqual("Salem", oregon.capital.name);
        Assert#isTrue(capitals.includes(oregon.capital));
    end;

    operation stateByAbbreviation();
    begin
        TestData#build();
        Assert#isNotNull(State#byAbbreviation("OR"));
        Assert#isNull(State#byAbbreviation("ZZ"));
    end;

    operation cityByName();
    begin
        var california;
        TestData#build();
        california := State#byAbbreviation("CA");
        Assert#isNotNull(california.city("San Francisco"));
        Assert#isNull(california.city("FooBar"));
    end;

    operation statePopulation();
    begin
        var oregon, expected;
        TestData#build();
        oregon := State#byAbbreviation("OR");
        Assert#isTrue(oregon.recordedPopulation > 0);
        Assert#areEqual(3, oregon.cities.size());
        expected := oregon.city("Portland").population + oregon.city("Eugene").population + oregon.city("Salem").population;
        Assert#areEqual(expected, oregon.recordedPopulation);
    end;

    operation populousStates_Abbreviations();
    begin
        var populousStateAbbreviations;
        TestData#build();
        populousStateAbbreviations := State#abbreviationsOfStatesMorePopulousThan(500000);
        Assert#areEqual(2, populousStateAbbreviations.size());
        Assert#isTrue(populousStateAbbreviations.includes("CA"));
        Assert#isTrue(populousStateAbbreviations.includes("OR"));
        Assert#isTrue(! populousStateAbbreviations.includes("WY"));
    end;

    operation statePopulationsAbove();
    begin
        var populations, oregon, found;
        TestData#build();
        oregon := State#byAbbreviation("OR");
        populations := State#statePopulationsAbove(500000);
        Assert#areEqual(2, populations.size());
        found := populations.\any((s : {\state : State,  : Integer}) : Boolean {
            s.\state.abbreviation = "OR"
        });
        Assert#areEqual(oregon.recordedPopulation, found.statePopulation);
    end;

    operation maximumPopulation();
    begin
        var san_francisco, maxPopulation;
        TestData#build();
        san_francisco := City extent.\any((c : City) : Boolean {
            c.name = "San Francisco"
        });
        maxPopulation := City#maximumPopulation();
        Assert#areEqual(san_francisco.population, maxPopulation);
    end;

    operation mostPopulousCity();
    begin
        var actual;
        TestData#build();
        actual := City#mostPopulousCity();
        Assert#isNotNull(actual);
        Assert#areEqual("San Francisco", actual.name);
    end;

    operation populousStates();
    begin
        var populousStates;
        TestData#build();
        populousStates := State#statesMorePopulousThan(500000);
        Assert#areEqual(2, populousStates.size());
        Assert#isTrue(populousStates.includes(State#byAbbreviation("CA")));
        Assert#isTrue(populousStates.includes(State#byAbbreviation("OR")));
        Assert#isTrue(! populousStates.includes(State#byAbbreviation("WY")));
    end;

    operation citiesMorePopulousThan();
    begin
        TestData#build();
        Assert#areEqual(4, City#citiesMorePopulousThan(500000));
        Assert#areEqual(1, City#citiesMorePopulousThan(1000000));
        Assert#areEqual(0, City#citiesMorePopulousThan(2000000));
    end;

    static operation statsFinder(abbreviation : String) : {( : StatePopulation) : Boolean};
    begin
        return (stat : StatePopulation) : Boolean {
            stat.abbreviation == abbreviation
        };
    end;

    operation statePopulations();
    begin
        var populations, oregon, wyoming;
        TestData#build();
        oregon := State#byAbbreviation("OR");
        wyoming := State#byAbbreviation("WY");
        populations := State#statePopulations();
        Assert#areEqual(State extent.size(), populations.size());
        Assert#areEqual(wyoming.recordedPopulation, populations.\any((stat : StatePopulation) : Boolean {
            stat.abbreviation = "WY"
        }).population);
        Assert#areEqual(oregon.recordedPopulation, populations.\any((stat : StatePopulation) : Boolean {
            stat.abbreviation = "OR"
        }).population);
    end;

    operation statePopulationsViaCities();
    begin
        var populations, oregon, wyoming;
        TestData#build();
        oregon := State#byAbbreviation("OR");
        wyoming := State#byAbbreviation("WY");
        populations := State#statePopulationsViaCities();
        Assert#areEqual(State extent.size(), populations.size());
        Assert#areEqual(wyoming.recordedPopulation, populations.\any((stat : StatePopulation) : Boolean {
            stat.abbreviation = "WY"
        }).population);
        Assert#areEqual(oregon.recordedPopulation, populations.\any((stat : StatePopulation) : Boolean {
            stat.abbreviation = "OR"
        }).population);
    end;
end;

class TestData

    static operation build();
    begin
        var california, oregon, wyoming;
        california := TestData#newState("California", "CA");
        TestData#newCity("San Francisco", 1356000, california);
        TestData#newCity("San Mateo", 101128, california);
        TestData#newCity("San Diego", 837442, california);
        TestData#newCity("Sacramento", 837442, california).makeCapital();
        oregon := TestData#newState("Oregon", "OR");
        TestData#newCity("Portland", 609456, oregon);
        TestData#newCity("Eugene", 159190, oregon);
        TestData#newCity("Salem", 160000, oregon).makeCapital();
        wyoming := TestData#newState("Wyoming", "WY");
        TestData#newCity("Cheyenne", 62448, wyoming).makeCapital();
    end;

    static operation newCity(name : String, population : Integer, cityState : State) : City;
    begin
        var city;
        city := new City;
        city.name := name;
        city.population := population;
        city.cityState := cityState;
        return city;
    end;

    static operation newState(name : String, abbreviation : String) : State;
    begin
        var newState;
        newState := new State;
        newState.name := name;
        newState.abbreviation := abbreviation;
        return newState;
    end;
end;

end.