[Library]
package timetracker_tests;

import timetracker;

[Test]
class ProjectScenarios

    (* The time reported for a project is the sum of the time of all entries for that project. *)
    operation timeReported();
    begin
        var project;
        begin
            project := Examples#project();
        end;
        begin
            project.addEntry(4, null);
            project.addEntry(3, null);
        end;
        begin
            Assert#areEqual(7, project.unitsReported);
        end;
    end;

    (* Reported entries are collected as discrete objects. *)
    operation itemsReported();
    begin
        var project1, project2;
        begin
            project1 := Examples#project();
            project2 := Examples#project();
            project1.addEntry(4, null);
            project1.addEntry(3, null);
        end;
        begin
            Assert#areEqual(2, project1.reported.size());
            Assert#areEqual(0, project2.reported.size());            
            project1.addEntry(5, null);
            project2.addEntry(1, null);            
        end;
        begin
            Assert#areEqual(3, project1.reported.size());
            Assert#areEqual(1, project2.reported.size());            
        end;
    end;

    (* A project's time to submit is the sum of all units reported but yet to be added to an invoice. *)
    operation timeToInvoice();
    begin
        var project, invoice, entry1, entry2;
        begin
            project := Examples#project();
            entry1 := project.addEntry(4, null);
            entry2 := project.addEntry(3, null);
            invoice := project.client.openInvoice();
            entry1.submit(invoice);
        end;
        begin
            Assert#areEqual(1, project.toSubmit.size());
            Assert#areEqual(3, project.unitsToSubmit);
        end;
    end;
end;

[Test]
class EntryScenarios

    (* The date for a new entry is today's date. *)
    operation entryDateDefaultsToToday();
    begin
        var anEntry;
        anEntry := Examples#project().addEntry(1, null);
        Assert#areEqual(Date#today(), anEntry.date);
    end;

    (* Entries submitted to an invoice must belong to a project of the same client. *)
    [Failure(constraint="WrongClient", context="submit")]
    operation cannotAssignEntryToInvoiceFromAnotherClient();
    begin
        var client1, client2, anEntry;
        client1 := Examples#client();
        client2 := Examples#client();
        anEntry := client1.newProject("Some project").addEntry(1, null);
        anEntry.submit(client2.openInvoice());
    end;

    (* Once an entry has been submitted to an invoice, it cannot be resubmitted to another invoice. *)
    [Failure(constraint="AlreadySubmitted", context="submit")]
    operation cannotSubmitEntryToTwoInvoices();
    begin
        var project, invoice1, invoice2, anEntry;
        project := Examples#project();
        invoice1 := project.client.openInvoice();
        invoice2 := project.client.openInvoice();        
        anEntry := project.addEntry(1, null);
        anEntry.submit(invoice1);
        anEntry.submit(invoice2);
    end;

    (* The number of units of work logged must be positive. *)
    [Failure(constraint="MustBePositive", context="units")]
    operation unitsMayNotBeNegative();
    begin
        Examples#project().addEntry(- 1, null);
    end;

    (* The number of units of work logged must be positive. *)
    [Failure(constraint="MustBePositive", context="units")]
    operation unitsMayNotBeZero();
    begin
        Examples#project().addEntry(0, null);
    end;
end;

[Test]
class InvoiceScenarios

    (* An invoice begins in the state of Preparation. *)
    operation prepareInvoice();
    begin
        var invoice;
        begin
            invoice := Examples#client().openInvoice();
        end;
        begin
            Assert#areEqual(Invoice::Status#Open, invoice.status);
        end;
    end;

    (* An invoice once issued goes to the state of Issued. *)
    operation issueInvoice();
    begin
        var invoice, anEntry, client;
        begin
            client := Examples#client();
            anEntry := client.newProject("Some project").addEntry(1, null);
            invoice := client.openInvoice();
            anEntry.submit(invoice);
            invoice.issue();
        end;
        begin
            Assert#areEqual(Invoice::Status#Issued, invoice.status);
        end;
    end;

    (* An invoice can be cancelled while under preparation. *)
    operation cancelInvoiceInPreparation();
    begin
        var invoice;
        begin
            invoice := Examples#client().openInvoice();
        end;
        begin
            invoice.cancel();
        end;
        begin
            Assert#areEqual(Invoice::Status#Cancelled, invoice.status);
        end;
    end;

    (* An invoice can be cancelled while pending payment. *)
    operation cancelInvoiceBeforePayment();
    begin
        var invoice, project;
        begin
            project := Examples#project();
            invoice := project.client.openInvoice();
            project.addEntry(1, null).submit(invoice);
            invoice.issue();
        end;
        begin
            invoice.cancel();
        end;
        begin
            Assert#areEqual(Invoice::Status#Cancelled, invoice.status);
        end;
    end;
    
    (* An invoice cannot be cancelled after payment is received. *)
    [Failure(constraint="MustBeOpenOrIssued", context="cancel")]
    operation cannotCancelInvoice();
    begin
        var invoice;
        begin
            invoice := Examples#client().openInvoice();
            invoice.client.newProject("Some project").addEntry(1, null).submit(invoice);
            invoice.issue();
            send PaymentReceived() to invoice;            
        end;
        begin
            invoice.cancel();
        end;
    end;    
    
    (* An invoice cannot be issued after it has been cancelled. *)
    [Failure(constraint="MustBeOpen", context="issue")]
    operation cannotIssueCancelledInvoice();
    begin
        var invoice;
        begin
            invoice := Examples#client().openInvoice();
            invoice.client.newProject("Some project").addEntry(1, null).submit(invoice);
            invoice.cancel();
        end;
        begin
            invoice.issue();
        end;
    end;        

    (* The total of units in an invoice is the sum of the units of all entries submitted. *)
    operation totalUnits();
    begin
        var invoice, project1, project2, client;
        begin
            client := Examples#client();
            invoice := client.openInvoice();
            project1 := client.newProject("Project 1");
            project2 := client.newProject("Project 2");
            project1.addEntry(1, null).submit(invoice);
            project1.addEntry(3, null).submit(invoice);
            project2.addEntry(7, null).submit(invoice);
        end;
        begin
            Assert#areEqual(11, invoice.totalUnits);
        end;
    end;

    (* Once payment for an invoice is received, the invoice goes to the Received state. *)
    operation paymentReceived();
    begin
        var invoice;
        begin
            invoice := Examples#client().openInvoice();
            invoice.client.newProject("Some project").addEntry(1, null).submit(invoice);
            invoice.issue();
            send PaymentReceived() to invoice;
        end;
        begin
            Assert#areEqual(Invoice::Status#Received, invoice.status);
        end;
    end;

    (* It is an error to submit an entry to an invoice that has already being issued. *)
    [Failure(constraint="InvoiceMustBeOpen", context="submit")]
    operation cannotSubmitEntryIfInvoiceIssued();
    begin
        var project, invoice;
        begin
            project := Examples#project();
            invoice := project.client.openInvoice();
            project.addEntry(1, null).submit(invoice);
            invoice.issue();
        end;
        begin
            project.addEntry(2, null).submit(invoice);
        end;
    end;

    (* It is an error to submit an entry to an invoice that has already being cancelled. *)    
    [Failure(constraint="InvoiceMustBeOpen", context="submit")]
    operation cannotSubmitEntryIfInvoiceCancelled();
    begin
        var project, invoice;
        begin
            project := Examples#project();
            invoice := project.client.openInvoice();
            invoice.cancel();
        end;
        begin
            project.addEntry(2, null).submit(invoice);
        end;
    end;

    (* It is an error to issue an invoice with no entries submitted to it. *)
    [Failure(constraint="MustHaveEntries", context="issue")]
    operation cannotIssueInvoiceWithoutAnyEntry();
    begin
        Examples#client().openInvoice().issue();
    end;
end;

[Test]
class ClientScenarios
    (* It is possible to retrieve the clients with open invoices. *)
    operation withInvoicesSubmitted();
    begin
        var client1, client2, client3, existing;
        begin
            existing := Client#withOpenInvoices().size();
            client1 := Examples#client();
            client2 := Examples#client();
            client3 := Examples#client();
            /* one client with one invoice, the other one with two */
            client1.openInvoice();
            client2.openInvoice();
            client2.openInvoice();
        end;
        begin
            Assert#areEqual(existing + 2, Client#withOpenInvoices().size());
            (!!client1.openInvoices.one()).cancel();
        end;
        begin
            Assert#areEqual(existing + 1, Client#withOpenInvoices().size());
            (!!client2.openInvoices.one()).cancel();
        end;
        begin
            Assert#areEqual(existing + 1, Client#withOpenInvoices().size());
            (!!client2.openInvoices.one()).cancel();
        end;
        begin
            Assert#areEqual(existing, Client#withOpenInvoices().size());
        end;
    end;
end;

(* Helper class to set up various test fixtures. *)
class Examples

    private static operation clientWithName(name : String) : Client;
    begin
        var client;
        client := new Client;
        client.name := name;
        return client;
    end;

    (* A simple client. *)
    private static operation client() : Client;
    begin
        return Examples#clientWithName("New Client");
    end;

    private static operation projectWithName(description : String, client : Client) : Project;
    begin
        var project;
        project := new Project;
        project.description := description;
        project.client := client;
        return project;
    end;

    (* A simple project and its client. *)
    private static operation project() : Project;
    begin
        return Examples#projectWithName("New Project", Examples#client());
    end;
end;

end.