[Application]
package timetracker;


import invoicer;

(* A person or organization work can be done for. *)
class Client

    (* The name of the client. *)
    attribute name : String;

    attribute projects : Project[*];

    attribute invoices : Invoice[*];

    operation newProject(description : String) : Project;
    begin
        var newProject;
        newProject := new Project;
        newProject.description := description;
        link ClientProject(client := self, projects := newProject);
        return newProject;
    end;

    operation openInvoice() : Invoice;
    begin
        var newInvoice;
        newInvoice := new Invoice;
        link ClientInvoice(client := self, invoices := newInvoice);
        return newInvoice;
    end;

    derived attribute openInvoices : Invoice[*] := {
        self.invoices.select((i : Invoice) : Boolean { i.open })
    };

    static query withOpenInvoices() : Client[*];
    begin
        return Client extent.select((client : Client) : Boolean {
            client.invoices.exists((i : Invoice) : Boolean { i.open })
        });
    end;

    static query withIssuedInvoices() : Client[*];
    begin
        return Client extent.select((client : Client) : Boolean {
            client.invoices.exists((i : Invoice) : Boolean { i.issued })
        });
    end;
end;

(* A project provides a context for work entries. *)
class Project

    (* A description for the project. *)
    attribute description : String;

    attribute reported : Entry[*];

    derived attribute toSubmit : Entry[*] := {
        self.reported.select((e : Entry) : Boolean { not e.submitted })
    };

    readonly attribute client : Client;

    derived attribute unitsReported : Integer := {
        self.reported.sum((e : Entry) : Integer { e.units })
    };

    derived attribute unitsToSubmit : Integer := {
        self.toSubmit.sum((e : Entry) : Integer { e.units })
    };

    operation addEntry(units : Integer, description : Memo[0,1]) : Entry;
    begin
        var newEntry;
        newEntry := new Entry;
        newEntry.units := units;
        newEntry.memo := description;        
        link ProjectEntry(reported := newEntry, project := self);
        return newEntry;
    end;
end;

(* An invoice describes work done for a client within one or more projects. *)
class Invoice

    derived attribute moniker : String := {
    	self.number + " - " + self.client.name
    };

    derived attribute number : String := {
        ("" + self.issueDate.year()) + "." + self.invoiceInternalNumber
    };

    private derived id attribute invoiceInternalNumber : Integer;

    attribute client : Client;

    attribute issueDate : Date := { Date#today() };

    attribute submitted : Entry[*];

    derived attribute open : Boolean := { self.status == Status#Open };

    derived attribute issued : Boolean := { self.status == Status#Issued };

    derived attribute received : Boolean := {
        self.status == Status#Received
    };

    attribute status : Status;

    required port invoicer : Invoicer;

    derived attribute totalUnits : Integer := {
        self.submitted.sum((e : Entry) : Integer { e.units })
    };
    
    operation reassign(newClient : Client)
        precondition MustBeDifferentClient(newClient) { !(self.client == newClient) };
    begin
        self.client := newClient;
    end;

    operation issue()
        precondition MustBeOpen { self.open }
        (* Cannot issue an invoice that has no entries submitted. *)
        precondition MustHaveEntries { not self.submitted.isEmpty() };
    begin
        self.issueDate := Date#today();
    end;

    operation cancel()
        precondition MustBeOpenOrIssued { self.open or self.issued };

    private operation sendInvoice();
    begin
        send InvoiceIssued() to self.invoicer;
    end;

    statemachine Status

        initial state Open
            transition on call(issue) to Issued;
            transition on call(cancel) to Cancelled;
        end;

        state Issued
            entry {
                self.sendInvoice();
            };

            transition on signal(PaymentReceived) to Received;
            transition on call(cancel) to Cancelled;
        end;

        state Received end;

        state Cancelled end;

    end;

end;

signal PaymentReceived
end;

class Entry

    (* The number of units of work in this entry. *)
    attribute units : Integer := 1
        (* Entry must describe a positive number of units. *)
        invariant MustBePositive { self.units > 0 };

    (* The project the work went into. *)
    attribute project : Project;

    (* The date when the work happened. *)
    attribute date : Date := { Date#today() };

    (* An optional description of the work performed . *)
    attribute memo : Memo[0, 1];

    derived attribute client : Client := { self.project.client };

    (* Entry can be only submitted to an invoice once. Cannot be set directly but via #submit *)
    readonly attribute invoice : Invoice[0, 1];

    derived attribute submitted : Boolean := { not (self.invoice == null) };

    (* Submits this entry to a chosen invoice for the client. *)
    operation submit(invoice : Invoice)
        precondition AlreadySubmitted { not self.submitted }
        precondition WrongClient(invoice) {
            invoice.client == self.project.client
        }
        precondition InvoiceMustBeOpen(invoice) { invoice.open };
    begin
        self.invoice := invoice;
    end;
end;

composition ProjectEntry

    role Project.reported;

    role Entry.project;

end;

association SubmittedEntry

    role Invoice.submitted;

    role Entry.invoice;

end;

association ClientProject

    role Client.projects;

    role Project.client;

end;

association ClientInvoice

    role Client.invoices;

    role Invoice.client;

end;

end.