[Library]
package car_rental_tests;

apply mdd_extensions;
import mdd_types;
import car_rental;

[Test]
class MakeScenarios

    operation creation();
    begin
        var carMake;
        begin
            carMake := Examples#newMake();
        end;
        begin
            Assert#isNotNull(carMake);
            Assert#isNotNull(carMake.name);                                    
            Assert#areEqual("Fiat", carMake.name);                                                
        end;
    end;
end;


[Test]
class ModelScenarios

    operation creation();
    begin
        var carModel;
        begin
            carModel := Examples#newModel();
            carModel.name := "Mille";
        end;
        begin
            Assert#isNotNull(carModel);
            Assert#isNotNull(carModel.name);            
            Assert#areEqual("Mille", carModel.name);                                                                        
            Assert#isNotNull(carModel.make);            
            Assert#isNotNull(carModel.make.name);                                    
            Assert#areEqual("Fiat", carModel.make.name);                                                            
        end;
    end;
end;


[Test]
class CustomerScenarios

    operation creation();
    begin
        var customer;
        begin
            customer := Examples#newCustomer();
        end;
        begin
            Assert#isNotNull(customer);
            Assert#isNotNull(customer.name);
            Assert#areEqual("Joana de Almeida", customer.name);                                                                        
        end;
    end;


    operation rentalHistory();
    begin
        var car, customer;
        begin
            car := Examples#newCar();
            customer := Examples#newCustomer();
            customer.rent(car);
            Assert#areEqual(1, customer.rentals.size());
            customer.finishRental();
        end;
        begin
            customer.rent(car);
        end;            
        begin        
            Assert#areEqual(2, customer.rentals.size());
        end;
    end;
end;

[Test]
class RentalScenarios

    operation startsAsInProgress();
    begin
        var car, customer;
        begin
            car := Examples#newCar();
            customer := Examples#newCustomer();
            Assert#isNull(customer.currentRental);
            customer.rent(car);
        end;
        begin
            Assert#isNotNull(customer.currentRental);
            Assert#isTrue(customer.currentRental.inProgress);
        end;
    end;

    operation finishedUponReturn();
    begin
        var car, customer, rental;
        begin
            car := Examples#newCar();
            customer := Examples#newCustomer();
            customer.rent(car);
            rental := customer.currentRental;
        end;
        begin
            Assert#isTrue(rental.inProgress);
            customer.finishRental();
        end;
        begin
            Assert#isTrue(not rental.inProgress);
        end;
    end;

    [Failure(constraint="CustomerMustHaveNoCurrentRental")]
    operation oneCarPerCustomer();
    begin
        var car1, car2, customer;
        begin
            car1 := Examples#newCar();
            car2 := Examples#newCar();
            customer := Examples#newCustomer();
            customer.rent(car1);
        end;
        begin
            customer.rent(car2);
        end;
    end;
    
    operation countInProgress();
    begin
        var car1, car2, car3, customer1, customer2, customer3, baseline;
        begin
            baseline := Rental#countOfRentalsInProgress();
            car1 := Examples#newCar();
            car2 := Examples#newCar();
            car3 := Examples#newCar();            
            customer1 := Examples#newCustomer();
            customer2 := Examples#newCustomer();
            customer3 := Examples#newCustomer();            
            customer1.rent(car1);
            customer2.rent(car2);            
            customer3.rent(car3);                        
        end;
        begin
            Assert#areEqual(3, Rental#countOfRentalsInProgress() - baseline);
            customer3.finishRental();
        end;
        begin
            Assert#areEqual(2, Rental#countOfRentalsInProgress() - baseline);
        end;
    end;

    [Failure(constraint="CarMustBeAvailable")]
    operation carUnavailable();
    begin
        var car, customer1, customer2;
        begin
            car := Examples#newCar();
            customer1 := Examples#newCustomer();
            customer2 := Examples#newCustomer();
            customer1.rent(car);
        end;
        begin
            Assert#isTrue(car.rented);
            customer2.rent(car);
        end;
    end;
end;

[Test]
class CarScenarios

    operation creation();
    begin
        var car;
        begin
            car := Examples#newCar();
        end;
        begin
            Assert#isNotNull(car);
            Assert#isNotNull(car.plate);            
            Assert#isNotNull(car.carModel);
            Assert#isNotNull(car.carModel.name);            
            Assert#isNotNull(car.carModel.make);                        
            Assert#isNotNull(car.carModel.make.name);                                    
        end;
    end;

    operation startsAsValid();
    begin
        var car;
        car := Examples#newCar();
    end;

    operation startsAsAvailable();
    begin
        var car;
        car := Examples#newCar();
        Assert#isTrue(car.available);
    end;

    [Failure(constraint="YearAboveMinimum", context="year")]
    operation tooOld();
    begin
        var car;
        car := Examples#newCar();
        car.year := 1900;
    end;

    [Failure(constraint="YearBelowMaximum", context="year")]
    operation tooNew();
    begin
        var car;
        car := Examples#newCar();
        car.year := 2500;
    end;

    [Failure(constraint="PriceAboveMinimum", context="price")]
    operation priceIsTooLow();
    begin
        var car;
        car := Examples#newCar();
        car.price := 49.0;
    end;

    [Failure(constraint="PriceBelowMaximum", context="price")]
    operation priceIsTooHigh();
    begin
        var car;
        car := Examples#newCar();
        car.price := 2000.0;
    end;

    operation unavailableWhenRented();
    begin
        var car, customer;
        begin
            car := Examples#newCar();
            customer := Examples#newCustomer();
            Assert#areEqual(Car::Status#Available, car.status);
            customer.rent(car);
        end;
        begin
            Assert#areEqual(Car::Status#Rented, car.status);
        end;
    end;
    
    operation availableUponReturn();
    begin
        var car, customer, rental;
        begin
            car := Examples#newCar();
            customer := Examples#newCustomer();
        end;
        begin
            Assert#areEqual(Car::Status#Available, car.status);            
            customer.rent(car);
            rental := customer.currentRental;
        end;
        begin
            Assert#areEqual(Car::Status#Rented, car.status);                        
            customer.finishRental();
        end;
        begin
            Assert#areEqual(Car::Status#Available, car.status);
        end;
    end;

    operation unavailableWhenUnderRepair();
    begin
        var car;
        begin
            car := Examples#newCar();
        end;
        begin
            Assert#isTrue(car.available);        
            Assert#isTrue(not car.underRepair);
            car.startRepair();
        end;
        begin
            Assert#isTrue(not car.available);        
            Assert#isTrue(car.underRepair);
        end;
    end;
    
        
    operation availableUponRepairCompletion();
    begin
        var car;
        begin
            car := Examples#newCar();
        end;
        begin
            Assert#isTrue(car.available);
            car.startRepair();
        end;
        begin
            Assert#isTrue(not car.available);
            car.finishRepair();
        end;
        begin
            Assert#isTrue(car.available);
        end;
    end;
    
    operation byMake();
    begin
	    var make1, make2, make3, model1, model2, model3, model4, car1, car2, car3, car4;
        begin
            make1 := Examples#newMake();
            make2 := Examples#newMake();            
            make3 := Examples#newMake();            
        end;
        begin
            model1 := Examples#newMakeModel(make1);
            model2 := Examples#newMakeModel(make2); 
            model3 := Examples#newMakeModel(make2); 
            model4 := Examples#newMakeModel(make3);             
        end;
        begin
            car1 := Examples#newCarForModel(model1);
            car2 := Examples#newCarForModel(model2); 
            car3 := Examples#newCarForModel(model2); 
            car4 := Examples#newCarForModel(model3);             
        end;        
        begin
            Assert#areEqual(1, Car#byMake(make1).size());
            Assert#areEqual(3, Car#byMake(make2).size());
            Assert#areEqual(0, Car#byMake(make3).size());            
        end;
    end;
end;

class Examples

    private static operation newMake() : Make;
    begin
        var make;
        make := new Make;
        make.name := "Fiat";
        return make;
    end;

    private static operation newModel() : CarModel;
    begin
        return Examples#newMakeModel(Examples#newMake());
    end;
    
    private static operation newMakeModel(make : Make) : CarModel;
    begin
        var carModel;
        carModel := new CarModel;
        carModel.name := "A model";
        carModel.make := make;
        return carModel;
    end;


    private static operation newCar() : Car;
    begin
        return Examples#newCarForModel(Examples#newModel());
    end;

    private static operation newCarForModel(carModel : CarModel) : Car;
    begin
        var car;
        car := new Car;
        car.year := Date#today().year();
        car.price := 100.0;
        car.color := "black";
        car.plate := "ABC-1234";
        car.carModel := carModel;
        return car;
    end;

    private static operation newCustomer() : Customer;
    begin
        var customer;
        customer := new Customer;
        customer.name := "Joana de Almeida";
        return customer;
    end;
end;

end.
