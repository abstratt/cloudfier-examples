[Library]
package carserv_tests;

apply mdd_extensions;
import mdd_types;

import carserv::Model;
import carserv::Service;
import carserv;

[Test]
class CustomerScenarios

    operation vipCustomers();
    begin
        var vipCustomer1, vipCustomer2, regularCustomer1, regularCustomer2;
        begin
            vipCustomer1 := TestData#newCustomer();
            vipCustomer2 := TestData#newCustomer();
            regularCustomer1 := TestData#newCustomer();            
            regularCustomer2 := TestData#newCustomer();                        
        end;
        begin
            TestData#newCar(vipCustomer1);
            TestData#newCar(vipCustomer1);            
            TestData#newCar(vipCustomer2);
        end;
        begin
            Assert#isTrue(vipCustomer1.vip);
            Assert#isTrue(!vipCustomer2.vip);            
            Assert#isTrue(!regularCustomer1.vip);            
            Assert#isTrue(!regularCustomer2.vip);            
        end;
        begin
            TestData#newCar(vipCustomer2);
        end;
        begin
            Assert#isTrue(vipCustomer2.vip);            
        end;
        begin
            Assert#isTrue(Customer#vipCustomers().includes(vipCustomer1));            
            Assert#isTrue(Customer#vipCustomers().includes(vipCustomer2));            
            Assert#isTrue(!Customer#vipCustomers().includes(regularCustomer1));            
            Assert#isTrue(!Customer#vipCustomers().includes(regularCustomer2));                        
        end;
    end;
    
    operation carlessCustomers();
    begin
        var customer1, customer2, customer3;
        begin
            customer1 := TestData#newCustomer();
            customer2 := TestData#newCustomer();
            customer3 := TestData#newCustomer();            
            TestData#newCar(customer1);
        end;
        begin
            Assert#isTrue(!Customer#carlessCustomers().includes(customer1));            
            Assert#isTrue(Customer#carlessCustomers().includes(customer2));            
            Assert#isTrue(Customer#carlessCustomers().includes(customer3));                        
            TestData#newCar(customer2);
        end;
        begin
            Assert#isTrue(!Customer#carlessCustomers().includes(customer1));            
            Assert#isTrue(!Customer#carlessCustomers().includes(customer2));            
            Assert#isTrue(Customer#carlessCustomers().includes(customer3));                        
        end;
    end;
    
end;

[Test]
class MechanicScenarios

    operation startsInTraining();
    begin
        var mechanic;
        begin
	        mechanic := TestData#newMechanic();        
            Assert#isTrue(mechanic.training);
        end;
    end;

    operation goesOnVacation();
    begin
        var mechanic;
        begin
            mechanic := TestData#getAMechanic();
        end;
        begin
            Assert#isTrue(mechanic.working);
            mechanic.beginVacation();
        end;
        begin
            Assert#isTrue(! mechanic.working);
        end;
        begin
            mechanic.endVacation();
        end;
        begin
            Assert#isTrue(mechanic.working);
        end;
    end;

    operation workCompleted();
    begin
        var mechanic, service;
        begin
            mechanic := TestData#getAMechanicWithWorkScheduled();
            service := mechanic.upcomingServices.one();
            Assert#isTrue(mechanic.workScheduled);
            Assert#isTrue(! mechanic.workInProgress);
            service.start();
        end;
        begin
            Assert#isTrue(!mechanic.workScheduled);
            Assert#isTrue(mechanic.workInProgress);
            service.complete();
        end;
        begin
            Assert#isTrue(! mechanic.workInProgress);
            Assert#isTrue(!mechanic.workScheduled);
        end;
    end;
    
    operation servicesByTechnician();
    begin
        var mechanic, car, service1, service2, service3;
        begin
            mechanic := TestData#getAMechanic();
            car := TestData#newCar(TestData#newCustomer());
            service1 := Service#newService(car, Memo#fromString("Service 1"), 1);
            service2 := Service#newService(car, Memo#fromString("Service 2"), 1);
            service3 := Service#newService(car, Memo#fromString("Service 3"), 1);            
        end;
        begin
            service1.assignTo(mechanic);
            service2.assignTo(mechanic);            
        end;
        begin
            Assert#isTrue(mechanic.upcomingServices.includes(service1));
            Assert#isTrue(mechanic.upcomingServices.includes(service2));            
            Assert#isTrue(!mechanic.upcomingServices.includes(service3));            
        end;
    end;
    

    [Failure(constraint="NoWorkInProgress")]
    operation cannotGoOnVacationIfWorkInProgress();
    begin
        var mechanic, service;
        begin
            mechanic := TestData#getAMechanicWithWorkScheduled();
        end;
        begin
            service := mechanic.upcomingServices.one();
            service.start();
        end;
        begin
            mechanic.beginVacation();
        end;
    end;

    [Failure(constraint="MustBeAssigned")]
    operation cannotStartServiceIfNotAssigned();
    begin
        var service, car;
        begin
            car := TestData#newCar(TestData#newCustomer());
            service := Service#newService(car, Memo#fromString("A service"), 1);
        end;
        begin
            service.start();
        end;
    end;
    

    [Failure(constraint="MustBeOnVacation")]
    operation cannotEndVacationIfAlreadyWorking();
    begin
        var mechanic;
        begin
            mechanic := TestData#getAMechanic();
            mechanic.endVacation();
        end;
    end;

    operation retires();
    begin
        var mechanic;
        begin
            mechanic := TestData#getAMechanicWithWorkScheduled();
        end;
        begin
            Assert#isTrue(mechanic.workScheduled);
            Assert#isTrue(! mechanic.workInProgress);
            mechanic.retire();
        end;
        begin
            Assert#isTrue(! mechanic.workScheduled);
        end;
    end;
end;

class TestData

    static operation getAMechanic() : AutoMechanic;
    begin
        var mechanic;
        begin
	        mechanic := TestData#newMechanic();
	        mechanic.completeTraining();
            return mechanic;
        end;        
    end;

    static operation getAMechanicWithWorkScheduled() : AutoMechanic;
    begin
        var mechanic, service, car;
        begin
            mechanic := TestData#getAMechanic();
            car := TestData#newCar(TestData#newCustomer());
            service := Service#newService(car, Memo#fromString("A service"), 1);
        end;
        begin
            /* important to perform this step in its own unit of work (so it can see state transitions) */
            service.assignTo(mechanic);
        end;
        return mechanic;
    end;

    static operation newMechanic() : AutoMechanic;
    begin
        var mechanic;
        mechanic := new AutoMechanic;
        mechanic.firstName := "John";
        mechanic.lastName := "Fixalot";
        return mechanic;
    end;

    static operation newCustomer() : Customer;
    begin
        var customer;
        customer := new Customer;
        customer.firstName := "James";
        customer.lastName := "Rider";
        customer.title := Title#Mr;
        return customer;
    end;
    
    static operation newCar(customer : Customer) : Car;
    begin
        var car;
        car := new Car;
        car.registrationNumber := "1234567890";
        car.\model := TestData#newModel();
        car.owner := customer;
        return car;
    end;

    static operation newModel() : Model;
    begin
        var carModel;
        carModel := new Model;
        carModel.name := "A Model";
        carModel.make := TestData#newMake();
        return carModel;
    end;

    static operation newMake() : Make;
    begin
        var make;
        make := new Make;
        make.name := "A Make";
        return make;
    end;
end;

end.