package carserv;

apply kirra;



import mdd_types;

abstract role class Person

    derived id attribute fullName : String := {
        self.firstName + " " + self.lastName
    };

    attribute firstName : String;

    attribute lastName : String;
end;

enumeration Title

    Mr;

    Mrs;

    Ms;
end;

class AutoMechanic specializes Person

    allow AutoMechanic all;

    attribute status : WorkingStatus;

    private derived attribute working : Boolean := {
        self.status == WorkingStatus#Working
    };

    private derived attribute training : Boolean := {
        self.status == WorkingStatus#Apprentice
    };

    (* Services currently in progress by this worker. *)
    derived attribute currentServices : Service[*] := {
        self<-TechnicianWorksOnService->services.select((service : Service) : Boolean {
            service.status == Service::Status#InProgress
        })
    };

    (* Services assigned to this worker but not yet started. *)
    derived attribute upcomingServices : Service[*] := {
        self<-TechnicianWorksOnService->services.select((service : Service) : Boolean {
            service.status == Service::Status#Booked
        })
    };

    derived attribute workInProgress : Boolean := {
        not self.currentServices.isEmpty()
    };

    derived attribute workScheduled : Boolean := {
        not self.upcomingServices.isEmpty()
    };

    (* Unassigns any work scheduled. Does not affect work in progress. *)
    operation unassign()
        precondition SomeWorkScheduled { self.workScheduled };
    begin
        self.doUnassign();
    end;

    private operation doUnassign();
    begin
        self.upcomingServices.forEach((s : Service) {
            unlink TechnicianWorksOnService(services := s, technician := self);
        });
    end;

    (* Puts employee into vacation. Unassigns any work scheduled. *)
    operation beginVacation()
        precondition NoWorkInProgress { not self.workInProgress };
    begin
    end;

    (* Brings the employee back from vacation. Employee can be assigned work again. *)
    operation endVacation()
        precondition MustBeOnVacation {
            self.status == WorkingStatus#Vacation
        };

    operation retire()
        precondition NoWorkInProgress { not self.workInProgress };

    operation rehire();

    (* 
        Completes the training period, promoting the apprentice to a trained mechanic. Mechanic
        will become apt for taking on services. 
    *)
    operation completeTraining();

    statemachine WorkingStatus

        initial state Apprentice
            transition on call(retire) to Retired;
            transition on call(completeTraining) to Working;
        end;

        state Working
            transition on call(beginVacation) to Vacation;
            transition on call(retire) to Retired;
        end;

        state Vacation
            transition on call(endVacation) to Working;
        end;

        state Retired
            entry {
                self.doUnassign();
            };

            transition on call(rehire) to Working;
        end;

    end;

end;

class Customer specializes Person

    allow AutoMechanic all;
    allow Customer all { System#user() == self };

    attribute cars : Car[0, *];

    attribute title : Title;

    /*
    derived attribute pendingServices : Service[*] := {
        self.cars.reduce((c : Car, soFar : Service[*]) : Service[*] {
            c.pendingServices.union(soFar)
        }, Service[])
    };

    derived attribute completedServices : Service[*] := {
        self.cars.reduce((c : Car, soFar : Service[*]) : Service[*] {
            c.completedServices.union(soFar)
        }, Service[])
    };
*/
    (* A valuable customer is a customer that has two or more cars with us *)
    derived attribute vip : Boolean := { self.cars.size() >= 2 };

    static query findByName(firstName : String[0, 1], lastName : String[0, 1]) : Customer[*]
        precondition OneMustBeProvided(firstName, lastName) {
            not ((firstName == null or firstName.isEmpty()) and (lastName == null or lastName.isEmpty()))
        };
    begin
        return Customer extent.select((c : Customer) : Boolean {
            c.firstName = firstName or c.lastName = lastName
        });
    end;

    static query vipCustomers() : Customer[*];
    begin
        return Customer extent.select((c : Customer) : Boolean { c.cars.size() >= 2 });
    end;
    
    static query carlessCustomers() : Customer[*];
    begin
        return Customer extent.select((c : Customer) : Boolean { c.cars.isEmpty() });
    end;
end;

association TechnicianWorksOnService

    role Service.technician;

    role services : Service[*];

end;

class Car

    allow AutoMechanic all;
    allow Customer all { System#user() == self.owner };

    attribute registrationNumber : String;

    private readonly attribute services : Service[*];

    reference \model : Model;

    attribute owner : Customer;

    derived attribute modelName : String := { self.\model.makeAndModel() };

    derived attribute pending : Integer := { self.pendingServices.size() };

    derived attribute pendingServices : Service[*] := {
        self.services.select((s : Service) : Boolean { s.pending })
    };

    derived attribute completedServices : Service[*] := {
        self.services.select((s : Service) : Boolean { not s.pending })
    };

    query registrationAndModel() : String;
    begin
        return self.\model.makeAndModel() + " " + self.registrationNumber;
    end;

    static query findByRegistrationNumber(regNumber : String) : Car[0, 1];
    begin
        return Car extent.\any((c : Car) : Boolean {
            regNumber = c.registrationNumber
        });
    end;

    (* Book a service on this car. *)
    operation bookService(description : Memo, estimateInDays : Integer);
    begin
        Service#newService(self, description, estimateInDays);
    end;

    static query findByOwner(owner : Customer) : Car[*];
    begin
        return owner.cars;
    end;
end;

class Service

    allow AutoMechanic all;
    allow Customer all { System#user() == self.car.owner };
    
    derived attribute serviceNumber : String := {
        "" + self.bookedOn.year().toString() + "." + self.sequence
    };

    private derived id attribute sequence : Integer;
    
    attribute description : Memo;

    attribute car : Car;

    readonly attribute bookedOn : Date := { Date#today() };

    attribute estimatedReady : Date := {
        Date#today().transpose(Duration#days(1))
    }
        invariant DeliveryDateMustBeAfterBookDate {
            self.estimatedReady == null or self.bookedOn == null or self.estimatedDays >= 0
        };

    derived attribute pending : Boolean := {
        self.status == Status#Booked or self.status == Status#InProgress
    };

    readonly attribute technician : AutoMechanic[0, 1];

    attribute status : Status;

    derived attribute estimatedDays : Integer := {
        self.bookedOn.difference(self.estimatedReady).toDays()
    };

    derived attribute assigned : Boolean := { not (self.technician == null) };

    static query inProgress() : Service[*];
    begin
        return Service extent.select((s : Service) : Boolean {
            s.status == Status#InProgress
        });
    end;

    static query booked() : Service[*];
    begin
        return Service extent.select((s : Service) : Boolean {
            s.status == Status#Booked
        });
    end;
    
    static query findByOwner(owner : Customer) : Service[*];
    begin
        return Service extent.select((s : Service) : Boolean {
            s.car.owner == owner
        });
    end;

    static operation newService(carToService : Car, description : Memo, estimate : Integer := 1) : Service
        precondition EstimateMustBePositive(estimate) { estimate > 0 };
    begin
        var s;
        s := new Service;
        s.estimatedReady := s.bookedOn.transpose(Duration#days(estimate));
        s.description := description;
        s.car := carToService;
        return s;
    end;

    (* Cancels a service. *)
    operation cancel();

    (* Starts the service. It can no longer be canceled. *)
    operation start()
        precondition MustBeAssigned { self.assigned };
    begin
    end;

    (* Completes the service. *)
    operation complete();
    begin
    end;

    (* Assigns a service that is available to a technician. *)
    operation assignTo(technician : AutoMechanic)
        precondition MustBePending { self.pending }
        precondition MustNotBeAssigned { ! self.assigned }
        precondition TechnicianMustBeWorking(technician) { technician.working };
    begin
        self.technician := technician;
    end;

    (* Assigns a service to a different technician other than the one currently assigned. *)
    operation transfer(mechanic : AutoMechanic)
        precondition MustBePending { self.pending }
        precondition MustBeAssigned { self.assigned }
        precondition AlreadyAssigned(mechanic) {
            not (self.technician == mechanic)
        }
        precondition TechnicianMustBeWorking(mechanic) { mechanic.working };
    begin
        self.technician := mechanic;
    end;

    statemachine Status

        initial state Booked
            transition on call(cancel) to Cancelled;
            transition on call(start) to InProgress;
        end;

        state InProgress
            transition on call(complete) to Completed;
        end;

        state Completed end;

        state Cancelled end;

    end;

end;

association CarOwner

    role Customer.cars;

    role Car.owner;

end;

aggregation ServiceCar

    role Car.services;

    role Service.car;

end;

class Make

    attribute name : String;
end;

class Model

    attribute name : String;

    attribute make : Make;

    query makeAndModel() : String;
    begin
        return self.make.name + " " + self.name;
    end;
end;

association

    role models : Model[*];

    role Model.make;

end;

end.
