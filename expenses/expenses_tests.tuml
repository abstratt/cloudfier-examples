[Library]
package expenses_tests;

import expenses;
apply mdd_extensions;

[Test]
class Tests

    private static operation declareOn(date : Date, employee : Employee) : Expense;
    begin
        var cat; 
        cat := Tests#createCategory("Sample category");
        return employee.declareExpense("just a test expense", 10, date, cat);
    end;

    private static operation declareFor(amount : Double, employee : Employee) : Expense;
    begin
        var cat; 
        cat := Tests#createCategory("Sample category");
        return employee.declareExpense("just a test expense", amount, Date#today(), cat);
    end;

    private static operation declare(amount : Double) : Expense;
    begin
        return Tests#declareFor(amount, Tests#createEmployee("John Doe"));
    end;
    
    private static operation createCategory(name : String) : Category;
    begin
        var cat;
        cat := new Category;
        cat.name := name;
        return cat;
    end;
    
    static operation createEmployee(name : String) : Employee;
    begin
        var employee;
        employee := new Employee;
        employee.name := name;
        return employee;
    end;

    operation declaredExpenseRemainsInDraft();
    begin
        var expense : Expense;
        begin
            expense := Tests#declare(10.0);
        end;
        begin
            Assert#areEqual(Expense::Status#Draft, expense.status);
        end;
    end;

    operation automaticApproval();
    begin
        var employee;
        employee := Tests#createEmployee("Jane Doe");
        Assert#isTrue(Tests#declareFor(49.9, employee).automaticApproval);
        Assert#isTrue(not Tests#declareFor(50.0, employee).automaticApproval);
    end;

    operation submitExpenseUnder50IsAutomaticallyApproved();
    begin
        var expense : Expense;
        begin
            expense := Tests#declare(10.0);
            Assert#isTrue(expense.automaticApproval);
        end;        
        begin
            expense.submit();
        end;
        begin
            Assert#areEqual(Expense::Status#Approved, expense.status);
        end;
    end;

    operation submitExpense50AndOverNeedsApproval();
    begin
        var expense : Expense;
        begin
            expense := Tests#declare(100.0);
            Assert#isTrue(not expense.automaticApproval);
        end;
        begin
            expense.submit();
        end;
        begin
            Assert#areEqual(Expense::Status#Submitted, expense.status);
        end;
    end;
    operation rejectedExpense();
    begin
        var expense : Expense;
        begin
            expense := Tests#declare(100.0);
        end;
        begin
            expense.submit();
        end;
        begin
            expense.reject(Memo#fromString("Non-reimbursable"));
        end;
        begin
            Assert#areEqual(Expense::Status#Rejected, expense.status);
            Assert#areEqual("Non-reimbursable", expense.rejectionReason);
        end;
    end;    
    
    operation reconsiderExpense();
    begin
        var expense : Expense;
        begin
            expense := Tests#declare(100.0);
        end;
        begin
            expense.submit();
        end;
        begin
            Assert#areEqual(0, expense.rejections);
            expense.reject(Memo#fromString("Non-reimbursable"));
        end;
        begin
            Assert#areEqual(1, expense.rejections);
            expense.reconsider();
        end;
        begin
            expense.reject(Memo#fromString("Non-reimbursable"));
        end;
        begin
            Assert#areEqual(2, expense.rejections);
        end;
    end;        

    [Failure(constraint="UnderRejectionThreshold")]    
    operation reconsiderExpenseTooManyTimes();
    begin
        var expense : Expense;
        begin
            expense := Tests#declare(100.0);
        end;
        begin
            expense.submit();
        end;
        begin
            expense.reject(Memo#fromString("rejection #1"));
        end;
        begin
            expense.reconsider();
        end;
        begin
            expense.reject(Memo#fromString("rejection #2"));
        end;
        begin
            expense.reconsider();
        end;
        begin
            expense.reject(Memo#fromString("rejection #3"));
        end;
        begin
            /* Will fail */
            expense.reconsider();
        end;
    end;        
    

    operation expenseByCategoryTotals();
    begin
        var employee, cat1, cat2, cat3;
        begin
            employee := Tests#createEmployee("Jane Doe");
            cat1 := Tests#createCategory("category 1");
            cat2 := Tests#createCategory("category 2");
            cat3 := Tests#createCategory("category 3");            
        end; 
        begin        
            employee.declareExpense("expense 1", 100, Date#today(), cat1).submit();
            employee.declareExpense("expense 2", 300, Date#today(), cat1).submit();
            employee.declareExpense("expense 3", 750, Date#today(), cat2).submit();
        end;
        begin
            var stats, cat1Stats, cat2Stats;
            stats := Category#totalExpensesPerCategory();
            Assert#isTrue(stats.size() >= 2);
            
            cat1Stats := stats.\any(
            	(group : CategoryTotal) : Boolean {
            		group.category == cat1 
        		}
        	);
            Assert#isNotNull(cat1Stats);
            Assert#areEqual(400, cat1Stats?.total);
            
            cat2Stats := stats.\any(
            	(group : CategoryTotal) : Boolean {
            		group.category == cat2
        		}
        	);
            Assert#isNotNull(cat2Stats);
            Assert#areEqual(750, cat2Stats?.total);            
        end;
    end;    
    
    operation approvedExpenseByCategoryTotals();
    begin
        var employee, cat1, cat2, cat3;
        begin
            employee := Tests#createEmployee("Jane Doe");
            cat1 := Tests#createCategory("category 1");
            cat2 := Tests#createCategory("category 2");
            cat3 := Tests#createCategory("category 3");            
        end; 
        begin        
            employee.declareExpense("expense 1", 100, Date#today(), cat1).submit();
            employee.declareExpense("expense 2", 300, Date#today(), cat1).submit();
            employee.declareExpense("expense 3", 750, Date#today(), cat2).submit();
            employee.declareExpense("expense 4", 5, Date#today(), cat2).submit();
            employee.declareExpense("expense 5", 7, Date#today(), cat2).submit();            
            employee.declareExpense("expense 6", 13, Date#today(), cat3).submit();                        
        end;
        begin
            var stats, cat2Stats, cat3Stats;
            stats := Category#totalApprovedExpensesPerCategory();
            Assert#isTrue(stats.size() >= 2);
            
            cat2Stats := stats.\any(
            	(group : CategoryTotal) : Boolean {
            		group.category == cat2 
        		}
        	);
            Assert#isNotNull(cat2Stats);
            Assert#areEqual(12, cat2Stats?.total);            
            
            cat3Stats := stats.\any(
            	(group : CategoryTotal) : Boolean {
            		group.category == cat3
        		}
        	);
            Assert#isNotNull(cat3Stats);
            Assert#areEqual(13, cat3Stats?.total);            
        end;
    end;    
    
    operation mostExpensedCategories();
    begin
        var employee, cat1, cat2, cat3;
        begin
            employee := Tests#createEmployee("Jane Doe");
            cat1 := Tests#createCategory("category 1");
            cat2 := Tests#createCategory("category 2");
            cat3 := Tests#createCategory("category 3");            
        end; 
        begin        
            employee.declareExpense("expense 1", 100, Date#today(), cat1).submit();
            employee.declareExpense("expense 2", 300, Date#today(), cat1).submit();
            employee.declareExpense("expense 3", 700, Date#today(), cat1).submit();
            employee.declareExpense("expense 5", 1500, Date#today(), cat2).submit();            
            employee.declareExpense("expense 6", 500, Date#today(), cat3).submit();                        
        end;
        begin
            var stats, cat1Stats, cat2Stats;
            stats := Category#mostExpensedCategories(1000.0);
            Assert#isTrue(stats.size() >= 2);
            
            cat1Stats := stats.\any(
            	(group : CategoryTotal) : Boolean {
            		group.category == cat1 
        		}
        	);
            Assert#isNotNull(cat1Stats);
            Assert#areEqual(1100, cat1Stats?.total);            
            
            cat2Stats := stats.\any(
            	(group : CategoryTotal) : Boolean {
            		group.category == cat2
        		}
        	);
            Assert#isNotNull(cat2Stats);
            Assert#areEqual(1500, cat2Stats?.total);            
        end;
    end;        
    
    operation expenseByCategoryCounts();
    begin
        var employee, cat1, cat2, cat3;
        begin
            employee := Tests#createEmployee("Jane Doe");
            cat1 := Tests#createCategory("category 1");
            cat2 := Tests#createCategory("category 2");
            cat3 := Tests#createCategory("category 2");            
        end; 
        begin        
            employee.declareExpense("expense 1", 100, Date#today(), cat1).submit();
            employee.declareExpense("expense 2", 100, Date#today(), cat1).submit();
            employee.declareExpense("expense 3", 100, Date#today(), cat2).submit();
        end;
        begin
            var stats, cat1Stats;
            stats := Expense#openExpenseCountPerCategory();
            Assert#isTrue(stats.size() >= 2);
            
            cat1Stats := stats.\any(
            	(group : {category : Category, count : Integer}) : Boolean {
            		group.category == cat1 
        		}
        	);
            Assert#isNotNull(cat1Stats);
            Assert#areEqual(2, cat1Stats?.count);            
        end;
    end;        
    
    operation anyPendingExpenses();
    begin
        var employee1, employee2, expense1, expense2;
        begin
            employee1 := Tests#createEmployee("An employee");
            employee2 := Tests#createEmployee("Another employee");    
            /* approve any existing expenses */
            Expense extent.forEach((e : Expense) { e.approve(); });
        end; 
        begin        
            Assert#isTrue(!Expense#anyPendingExpenses());            
            expense1 := Tests#declareFor(800, employee1);
            expense2 := Tests#declareFor(1000, employee2);            
        end;
        begin
            expense1.submit();
            expense2.submit();
        end;
        begin
            Assert#isTrue(Expense#anyPendingExpenses());        
            expense1.approve();
        end;
        begin
            Assert#isTrue(Expense#anyPendingExpenses());        
            expense2.approve();
        end;
        begin
            Assert#isTrue(!Expense#anyPendingExpenses());
        end;
    end;

    operation expensesInPeriod();
    begin
        var employee, expense1, expense2;
        begin
            employee := Tests#createEmployee("Some employee");
        end; 
        begin        
            expense1 := Tests#declareOn(Date#make(2016,9,10), employee);                        
            expense2 := Tests#declareOn(Date#make(2016,10,1), employee);
        end;
        begin
            Assert#areSame(expense2, Expense#findExpensesInPeriod(Date#make(2016,9,30), Date#make(2016,10,2)).one());
            Assert#areSame(expense2, Expense#findExpensesInPeriod(Date#make(2016,10,1), Date#make(2016,10,1)).one());
            Assert#isNull(Expense#findExpensesInPeriod(Date#make(2016,10,2), Date#make(2016,10,2)).one());
        end;
    end;
    
    operation expensesBeforeOrAfterADate();
    begin
        var employee, expense1, expense2;
        begin
            employee := Tests#createEmployee("Some employee");
        end; 
        begin        
            expense1 := Tests#declareOn(Date#make(2016,9,29), employee);                        
            expense2 := Tests#declareOn(Date#make(2016,10,1), employee);
        end;
        begin
            /* using #includes() to handle test data that we may find with such a broad criteria */
            Assert#isTrue(Expense#findExpensesInPeriod(null, Date#make(2016,9,30)).includes(expense1));
            Assert#isTrue(not (Expense#findExpensesInPeriod(null, Date#make(2016,9,30)).includes(expense2)));
            /* for searching after a date that is not a concern (unless we have data created on this date) */
            Assert#areSame(expense2, Expense#findExpensesInPeriod(Date#make(2016,9,30), null).one());
        end;
    end;
    
    operation expensesOnASpecificDate();
    begin
        var employee, expense1, expense2;
        begin
            employee := Tests#createEmployee("Some employee");
        end; 
        begin        
            expense1 := Tests#declareOn(Date#make(2016,9,30), employee);                        
            expense2 := Tests#declareOn(Date#make(2016,10,1), employee);
        end;
        begin
            Assert#areSame(expense2, Expense#findExpensesInPeriod(Date#make(2016,10,1), Date#make(2016,10,1)).one());
        end;
    end;
    
    
    operation employeesWithNoExpenses();
    begin
        var employee1, employee2, employee3, baseline;
        begin
            baseline := Employee#employeesWithNoExpenses().size();
            employee1 := Tests#createEmployee("An employee");
            employee2 := Tests#createEmployee("Another employee");    
            employee3 := Tests#createEmployee("Employee without expenses");                
        end; 
        begin        
            Assert#areEqual(baseline + 3, Employee#employeesWithNoExpenses().size());            
            Tests#declareFor(800, employee1);
            Tests#declareFor(1000, employee2);            
        end;
        begin
            Assert#areEqual(baseline + 1, Employee#employeesWithNoExpenses().size());
            Assert#isTrue(Employee#employeesWithNoExpenses().includes(employee3));            
            Tests#declareFor(1000, employee3);                        
        end;
        begin
            Assert#areEqual(baseline, Employee#employeesWithNoExpenses().size());
        end;
    end;
    
    
    operation expenseByEmployeeCounts();
    begin
        var ceo, salesGuy, programmer;
        begin
            ceo := Tests#createEmployee("The CEO");
            salesGuy := Tests#createEmployee("A sales guy");            
            programmer := Tests#createEmployee("A programmer that never expenses anything");                        
        end; 
        begin        
            Tests#declareFor(800, ceo);
            Tests#declareFor(1000, ceo);            
            Tests#declareFor(2000, ceo);                        
            Tests#declareFor(500, salesGuy);            
        end;
        begin
            var stats, ceoStats, salesGuyStats;
            stats := Expense#expenseCountPerEmployee();
            Assert#isTrue(stats.size() >= 2);
            
            ceoStats := stats.\any(
            	(group : {employee : Employee, expenseCount : Integer}) : Boolean {
            		group.employee == ceo
        		}
        	);
            salesGuyStats := stats.\any(
            	(group : {employee : Employee, expenseCount : Integer}) : Boolean {
            		group.employee == salesGuy
        		}
        	);        	
            Assert#isNotNull(ceoStats);
            Assert#areEqual(3, ceoStats?.expenseCount);            
            Assert#isNotNull(salesGuyStats);
            Assert#areEqual(1, salesGuyStats?.expenseCount);            
        end;
    end;        
    
    operation expenseDetails();
    begin
        var ceo, salesGuy,
        	cat1, cat2, cat3;
        begin
            cat1 := Tests#createCategory("category 1");
            cat2 := Tests#createCategory("category 2");
            cat3 := Tests#createCategory("category 2");            
            ceo := Tests#createEmployee("The CEO");
            salesGuy := Tests#createEmployee("A sales guy");            
        end; 
        begin        
            ceo.declareExpense("expense 1", 100, Date#today(), cat1);
            salesGuy.declareExpense("expense 2", 200, Date#today(), cat2);
        end;
        begin
            var details, ceoDetails, salesGuyDetails;
            details := Expense#expenseDetails();
            Assert#isTrue(details.size() >= 2);
             
            ceoDetails := details.\any(
            	(it : {reporter : Employee, category : String, expenseAmount : Double}) : Boolean {
            		it.reporter == ceo
        		}
        	);
            salesGuyDetails := details.\any(
            	(it : {reporter : Employee, category : String, expenseAmount : Double}) : Boolean {
            		it.reporter == salesGuy
        		}
        	);        	
            Assert#isNotNull(ceoDetails);
            Assert#areEqual(100, ceoDetails?.expenseAmount);            
            Assert#areEqual(cat1.name, ceoDetails?.category);               
            Assert#isNotNull(salesGuyDetails);
            Assert#areEqual(200, salesGuyDetails?.expenseAmount);             
            Assert#areEqual(cat2.name, salesGuyDetails?.category);                           
        end;
    end;        
    
    (* Once an employee is deleted, it can no longer be found. *)
    operation deleteEmployee();
    begin
        var employee1, employeeBaseline;
        begin
            employeeBaseline := Employee extent.size();
            employee1 := Tests#createEmployee("An employee");
        end; 
        begin
            Assert#areEqual(employeeBaseline + 1, Employee extent.size());                        
            employee1.deleteEmployee();
        end;
        begin
            Assert#areEqual(employeeBaseline, Employee extent.size());                        
        end;
    end;

    (* Once an employee is deleted, its expenses can no longer be found. *)
    operation deleteEmployeeAlsoDeletesExpenses();
    begin
        var employee1, expense1, expense2, expenseBaseline;
        begin
            expenseBaseline := Expense extent.size();            
            employee1 := Tests#createEmployee("An employee");
        end; 
        begin        
            expense1 := Tests#declareFor(800, employee1);
            expense2 := Tests#declareFor(1000, employee1);            
        end;
        begin
            Assert#areEqual(expenseBaseline + 2, Expense extent.size());            
            employee1.deleteEmployee();
        end;
        begin
            Assert#areEqual(expenseBaseline, Expense extent.size());            
        end;
    end;
end;

end.